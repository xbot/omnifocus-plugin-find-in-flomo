/*{
    "type": "action",
    "targets": ["omnifocus"],
    "author": "Donie",
    "identifier": "org.0x3f.find_in_flomo",
    "version": "2.0",
    "description": "Find the current project in Flomo.",
    "label": "Find in Flomo",
    "shortLabel": "Find in Flomo",
    "paletteLabel": "Find in Flomo",
    "image": "note.text"
}*/
(() => {
    const preferences = new Preferences();

    const devPlugin = PlugIn.find('org.0x3f.libdev');

    if (devPlugin === null) {
        throw new Error('Dev library plugin not installed.');
    }

    const libdev = devPlugin.library('libdev');

    const PREF_KEYWORD_TMPL = 'keyword_template';
    const PREF_PATTERN      = 'pattern';
    const PREF_TAG          = 'tag';

    if (!String.prototype.format) {
        String.prototype.format = function () {
            var args = arguments;
            return this.replace(/{(\d+)}/g, function (match, number) {
                return typeof args[number] != 'undefined'
                    ? args[number]
                    : match;
            });
        };
    }

    function get_matches(selection) {
        if (selection.databaseObjects.length <= 0) {
            return null;
        }

        const firstSelectedObj = selection.databaseObjects[0];

        let projectName = null;

        if (typeof firstSelectedObj.containingProject === 'undefined') {
            projectName = firstSelectedObj.name;
        } else {
            projectName = firstSelectedObj.containingProject.name;
        }

        const pattern = preferences.readString(PREF_PATTERN);

        if (pattern === null || pattern.length === 0) {
            console.log(action.plugIn.identifier + ': No pattern defined.');
            return null;
        }

        const regex = new RegExp(pattern);
        const matches = projectName.match(regex);

        if (matches.length < 2) {
            return null;
        }

        return matches.slice(1);
    }

    function prompt_preferences_dialog() {
        const pattern = libdev.getString(preferences, PREF_PATTERN);
        const patternInput = new Form.Field.String(PREF_PATTERN, 'Pattern', pattern);

        const keywordTmpl = libdev.getString(preferences, PREF_KEYWORD_TMPL);
        const keywordTmplInput = new Form.Field.String(PREF_KEYWORD_TMPL, 'Keyword template', keywordTmpl);

        const tag = libdev.getString(preferences, PREF_TAG);
        const tagInput = new Form.Field.String(PREF_TAG, 'Tag', tag);

        const preferenceForm = new Form();

        preferenceForm.addField(keywordTmplInput);
        preferenceForm.addField(patternInput);
        preferenceForm.addField(tagInput);

        preferenceForm.validate = function (formObject) { return true; };

        const formPromise = preferenceForm.show('Find in Flomo', 'Save');

        formPromise.then(function (formObject) {
            libdev.setString(preferences, PREF_KEYWORD_TMPL, formObject);
            libdev.setString(preferences, PREF_PATTERN,      formObject);
            libdev.setString(preferences, PREF_TAG,          formObject);
        });
    }

    var action = new PlugIn.Action(function (selection, sender) {
        try {
            if (libdev.isPreferenceAction(sender)) {
                prompt_preferences_dialog();
            } else {
                const matches = get_matches(selection);

                if (matches === null) {
                    throw { name: 'Emmm...', message: 'Cannot find matches for your pattern.' };
                }

                const keywordTmpl = preferences.readString(PREF_KEYWORD_TMPL);

                if (keywordTmpl === null || keywordTmpl.length === 0) {
                    throw { name: 'Emmm...', message: 'Keyword template must be set in preferences. (Click the action with CTRL key)' };
                }

                let url = 'https://v.flomoapp.com/mine?query=' + keywordTmpl.format(matches);

                const tag = preferences.readString(PREF_TAG);

                if (tag) {
                    url += '&tag=' + tag;
                }

                URL.fromString(url).open();
            }
        } catch (err) {
            new Alert(err.name, err.message).show();
        }
    });

    action.validate = function (selection, sender) {
        if (libdev.isPreferenceAction(sender)) {
            return true;
        }

        try {
            const matches = get_matches(selection);

            return matches !== null;
        } catch (err) {
            return false;
        }
    };

    return action;
})();
